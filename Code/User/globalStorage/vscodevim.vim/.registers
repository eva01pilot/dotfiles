{"version":"1.0","registers":[["%",[{"text":"compose.yaml","registerMode":0}]],["#",[{"text":"index.js","registerMode":0}]],[".",[{"text":{"commandList":["<Esc>"],"actionKeys":[],"waitingForAnotherActionKey":false,"actionsRun":[{"name":"","isJump":false,"createsUndoPoint":false,"preservesDesiredColumn":false,"keysPressed":[],"actionType":"command","isCompleteAction":true,"runsOnceForEachCountPrefix":false,"modes":[0],"keys":[["i"],["<Insert>"]]},{"name":"","isJump":false,"createsUndoPoint":false,"preservesDesiredColumn":false,"keysPressed":["<Esc>"],"actionType":"command","isCompleteAction":true,"runsOnceForEachCountPrefix":false,"modes":[1],"keys":[["<Esc>"],["<C-c>"],["<C-[>"]]}],"actionsRunPressedKeys":["i","<right>","\n","p","o","i","n","t","s",".","f","o","r","(","(","p","o","i","m","t","<BS>","<BS>","n","t","<right>","=",">","{","\n","p","o","i","m","n","<BS>","<BS>","n","t",".","<BS>","<BS>","<BS>","<BS>","<BS>","<BS>","<BS>","o","<BS>","\n","\n","\n","<up>","f","u","n","c","t","i","o","n"," ","g","e","t","D","i","s","t","a","n","c","e","B","e","t","w","e","e","n","P","o","i","n","t","s","I","<BS>","(","<right>","{","\n","<C-v>","<BS>","<down>","<Del>","<Del>","<Del>","<Del>","<down>","<Del>","<Del>","\n","<Del>","<Del>","<Del>","<Del>","<left>","<left>","<left>","<left>","<Del>","<Del>","<Del>","<Del>","<Del>","<Del>","<Del>","<up>","<Del>","<Del>","<Del>","<Del>","<down>","<down>","<Del>","<Del>","<Del>","<Del>","$","$","$","<BS>","<BS>","<BS>","l","a","t","1",","," ","<BS>","<BS>","i","<BS>","c","o","n","s","t"," ","<down>","<left>","<left>","<left>","<left>","<left>","<left>","c","o","p","<BS>","n","s","t"," ","<Del>","<down>","<left>","<up>","<right>","<left>","<BS>","<BS>","<BS>","<BS>","<BS>","l","e","t","<right>","<down>","<left>","<left>","<left>","<BS>","<down>","<Del>","<down>","<Del>","<down>","<Del>","<BS>","<BS>","i","t","<BS>","<BS>","\n","M","A","T","H",".","r","a","g","<BS>","<BS>","<BS>","<BS>","<BS>","<BS>","<BS>","<BS>","<up>","<up>","<up>","<up>","<up>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<left>","M","t","h","<BS>","<BS>","a","t","h",".","<left>","<left>","<left>","M","a","t","g",",","<BS>","<BS>","h",".","<left>","<left>","M","a","<BS>","<BS>","<left>","M","a","h","t",".","<BS>","<BS>","<BS>","t","j","/","<BS>","<BS>","j","<BS>","h",".","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","M","a","r","h","<BS>","<BS>","t","h",".","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<left>","M","a","r","h","<BS>","<BS>","a","<BS>","A","T","H",".","<BS>","<BS>","<BS>","<BS>","a","h","<BS>","t","h",".","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<BS>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<right>","<right>","<BS>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<BS>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<BS>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<BS>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<right>","<right>","<left>","u","d","1",",","<BS>","<BS>",","," ","l","a","t","<BS>","<BS>","o","n","g","i","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<BS>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>","<right>",","," ",";","a","t","<BS>","<BS>","<BS>","l","a","t","i","."," ","<BS>","<BS>","m"," ","<BS>","<BS>",","," ","l","o","<left>","<left>","<right>","<right>","n","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<BS>","<BS>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<left>","<BS>","M","a","t","h",".","<BS>","<down>","<Del>","\n","r","e","t"," ","d","i"," ","*"," ","1","0","0","0","<BS>","<BS>","<BS>","<BS>","<BS>","<BS>","<BS>","<BS>","<BS>","<BS>","<BS>","<BS>","<BS>","<BS>","<BS>","2","r","a","d","<down>","<down>","<down>","<down>","<down>","<down>","<up>","<up>","<up>","<up>","<left>","<BS>","<down>","<down>","<down>","<down>","<up>","\n","<up>","<up>","<up>","<left>","<BS>","2","g","<BS>","d","e","g","<Del>",","," ","i","o","<BS>","i","f","(","p","o","i","<BS>","<BS>","<BS>","<BS>","<BS>","<BS>","c","o","n","s","t"," ","l","a","t"," ","="," ","p","o","i","n","t",".","<BS>","[","<BS>","s","[","i","<right>","\n","c","o","n","s","t"," ","l","a","t","<BS>","<BS>","o","n","g"," ","="," ","p","o","s","[","i","<right>","<up>",".","<BS>",".","l","a","t",".","N","<right>","<Esc>"],"bufferedKeys":[],"allowPotentialRemapOnFirstKey":true,"hasRunOperator":false,"isInsertion":true,"transformer":{"transformations":[]},"count":0,"operatorCount":0,"registerKey":"","registerName":"\""},"registerMode":0}]],["\"",[{"registerMode":0,"text":":disabled=\"disabled\""}]],["*",[{"text":"import { DynamoDBClient, ScanCommand } from \"@aws-sdk/client-dynamodb\";\nimport { DynamoDBDocumentClient, PutCommand } from \"@aws-sdk/lib-dynamodb\";\nimport axios from 'axios'\nconst marshallOptions = {\n  // Whether to automatically convert empty strings, blobs, and sets to `null`.\n  convertEmptyValues: false, // false, by default.\n  // Whether to remove undefined values while marshalling.\n  removeUndefinedValues: true, // false, by default.\n  // Whether to convert typeof object to map attribute.\n  convertClassInstanceToMap: false, // false, by default.\n};\n\nconst unmarshallOptions = {\n  // Whether to return numbers as a string instead of converting them to native JavaScript numbers.\n  wrapNumbers: false, // false, by default.\n};\nexport const handler = async(event, context) => {\n    const method = event.requestContext.http.method\n    const ddb = new DynamoDBClient({region:\"eu-central-1\"});\n    const ddbDocClient = DynamoDBDocumentClient.from(ddb, {\n      marshallOptions,\n      unmarshallOptions,\n    });\n    let result = {}\n    switch(method){\n        case 'GET': {\n            const date = event.queryStringParameters.date\n            const member_id = event.queryStringParameters.member_id\n            const access_token = event.queryStringParameters.access_token\n            const domain = event.queryStringParameters.domain\n            const userRes = await axios.post(`${domain}/rest/user.current?auth=${access_token}`)\n            const isAdminRes = await axios.post(`${domain}/rest/profile?access_token=${access_token}`)\n            const isAdmin = isAdminRes.data.result['ADMIN']\n            const structure = userRes.data.result['UF_DEPARTMENT'][0]\n            if(date){\n            const timeStart = '00:00:00'\n            const timeEnd = '23:59:59'\n            const dateTimeStart = date + ' ' + timeStart\n            const dateTimeEnd = date + ' ' + timeEnd\n            const date1 = (new Date(dateTimeStart).valueOf()/1000).toString()\n            const date2 = (new Date(dateTimeEnd).valueOf()/1000).toString()\n            const input = {\n                \"ExpressionAttributeValues\": {\n                    \":date1\":{\n                        \"N\": date1,\n                    },\n                    \":date2\":{\n                        \"N\": date2\n                    },\n                    \":member_id\":{\n                        \"S\": member_id\n                    },\n                },\n                \"ConsistentRead\": true,\n                \n                \"ExpressionAttributeNames\": { \"#date\": \"time\", \"#member\": \"member_id\" },\n                \"FilterExpression\": \"#date BETWEEN :date1 and :date2 AND #member = :member_id\",\n                \"TableName\": \"Coordinates-cwagkzfuzja6xlxezsuh2v3ufi-develop\"\n            }\n            const command = new ScanCommand(input)\n            let pointsRes, userIDs\n            try{\n                pointsRes = await ddb.send(command)\n                const points = pointsRes.Items\n                const users = {}\n                userIDs = Array.from(new Set(points.map((p)=>p.crm_id.S)))\n                const userRess = isAdminRes ? await axios.post(`${domain}/rest/user.get?access_token=${access_token}`, {\n                    FILTER:{\n                        ID: userIDs,\n                    }\n                }) : await axios.post(`${domain}/rest/user.get?access_token=${access_token}`, {\n                    FILTER:{\n                        ID: userIDs,\n                        UF_DEPARTMENT: [structure]\n                    }\n                })\n                const us = Array.isArray(userRess.data.result) ? userRess.data.result.map((u)=>u.ID) : userRess.data.result['ID']\n                us.forEach((id)=>{\n                    users[id] = {}\n                })\n                points.forEach((point)=>{\n                    if(!us.includes(point.crm_id.S)) return\n                    users[point.crm_id.S][point.time.N] = {\n                    msg_id: point.message_id.S,\n                    coordinates: [point.lat.N, point.long.N]\n                } \n                })\n                result = users\n\n            }\n            catch(e){\n                result = e\n            }\n            }\n            break;\n        }\n        case 'POST':{\n            const { lat, long, time, horizontal_accuracy, message_id, tg_id } = JSON.parse(event.body)\n            const input = {\n                \"ExpressionAttributeValues\": {\n                    \":tg_id\":{\n                        \"S\": tg_id,\n                    },\n                },\n                \"ConsistentRead\": true,\n                \n                \"ExpressionAttributeNames\": { \"#tgid\": \"tg_id\" },\n                \"FilterExpression\": \"#tgid = :tg_id\",\n                \"TableName\": \"GeoClients-cwagkzfuzja6xlxezsuh2v3ufi-develop\"\n            }\n            const getClient = new ScanCommand(input)\n            \n            const clientRes = await ddb.send(getClient)\n            const client = clientRes.Items[0]\n            result = client\n            const items = {\n                \"Item\": {\n                    \"id\": message_id,\n                    \"lat\": lat,\n                    \"long\":long,\n                    \"time\":  +time, \n                    \"horizontal_accuracy\": horizontal_accuracy,\n                    \"crm_id\": client.crm_id.S,\n                    \"member_id\": client.member_id.S,\n                    \"message_id\":message_id,\n                },\n                \"TableName\": \"Coordinates-cwagkzfuzja6xlxezsuh2v3ufi-develop\"\n            };\n            const command = new PutCommand(items);\n            try{\n                result = await ddbDocClient.send(command)\n                \n            }catch(e){\n                result = e\n            }\n           \n            break;\n        }\n        case 'PUT': {\n            const { settingsObj, tg_id, crm_id, member_id, structure } = JSON.parse(event.body)\n            const input = {\n                \"Item\": {\n                    \"id\": tg_id,\n                    \"settings\":  JSON.stringify(settingsObj),\n                    \"member_id\": member_id,\n                    \"tg_id\": tg_id,\n                    \"crm_id\": crm_id,\n                },\n                \"ReturnConsumedCapacity\": \"TOTAL\",\n                \"TableName\": \"GeoClients-cwagkzfuzja6xlxezsuh2v3ufi-develop\"\n            }\n            const command = new PutCommand(input);\n            try{\n                result = await ddbDocClient.send(command);\n            } catch(e){\n                result = e\n            }\n            break;\n        }\n    }\n    const response = {\n        statusCode: 200,\n        headers:{\n            \"Access-Control-Allow-Origin\": \"*\",  \n            \"Access-Control-Allow-Headers\": \"Content-Type\",\n            \"Access-Control-Allow-Methods\": \"OPTIONS,POST,GET,PUT\"\n        },\n        body: JSON.stringify(result),\n    };\n    return response;\n};\n","registerMode":0}]],["0",[{"text":"        <img src=\"/facebook.svg\"/>","registerMode":1}]],["-",[{"text":":disabled=\"disabled\"","registerMode":0}]],["1",[{"text":"import { vElementVisibility } from '@vueuse/components'","registerMode":1}]]]}